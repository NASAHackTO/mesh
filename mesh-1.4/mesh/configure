#!/usr/bin/perl

use strict;
use File::Temp qw(tempfile);
use Getopt::Long;
use Socket;
use Sys::Hostname;

Getopt::Long::Configure(qw(bundling no_ignore_case require_order));
my %opts = (
    group => "mesh",
    home => "/home",
    mapport => 22,
    mpport => 22,
    prefix => "/usr",
    sshpath => "/usr/bin/ssh",
    user => "mesh",
);
$opts{help} = 1 if (scalar(@ARGV) == 0);
exit 1 if !GetOptions(\%opts, qw(
    disable-sso
    group=s
    help
    home=s
    maphost=s
    mapport=i
    mphost=s
    mpport=i
    prefix=s
    sshpath=s
    type=s
    user=s
));
my $host = hostname;
if ($opts{help}) {
    print "'configure' configures Mesh for different environments\n";
    print "\n";
    print "Usage: $0 [OPTION]...\n";
    print "\n";
    print "Defaults for the options are specified in brackets.\n";
    print "\n";
    print "Configuration:\n";
    print "  --help             display this help and exit\n";
    print "  --prefix=DIR       Mesh installation directory [$opts{prefix}]\n";
    print "\n";
    print "  For an MP install:\n";
    print "    --type=mp        prepare installation for designated MP host\n";
    print "    --group=GROUP    designated Mesh group on MP host [$opts{group}]\n";
    print "    --user=USER      designated Mesh user on MP host [$opts{user}]\n";
    print "    --mphost=HOST    fully-qualified host name of MP host [$host]\n";
    print "    --mpport=PORT    SSH port on MP host [$opts{mpport}]\n";
    print "    --maphost=HOST   fully-qualified host name of MAP host\n";
    print "    --mapport=PORT   SSH port on MAP host [$opts{mapport}]\n";
    print "\n";
    print "  For an SSO-disabled MP (i.e. Mash) install:\n";
    print "    --type=mp        prepare installation for designated MP host\n";
    print "    --disable-sso    disable single sign-on functionality\n";
    print "\n";
    print "  For a MAP install:\n";
    print "    --type=map       prepare installation for designated MAP host\n";
    print "    --group=GROUP    designated Mesh group on MAP host [$opts{group}]\n";
    print "    --home=PATH      root for home directories [$opts{home}]\n";
    print "    --user=USER      designated Mesh user on MAP host [$opts{user}]\n";
    print "    --mphost=HOST    fully-qualified host name of MP host\n";
    print "    --maphost=HOST   fully-qualified host name of MAP host [$host]\n";
    print "    --mapport=PORT   SSH port on MAP host [$opts{mapport}]\n";
    print "\n";
    print "  For a resource install:\n";
    print "    --type=resource  prepare installation for target resource\n";
    print "    --user=USER      designated Mesh user on MAP host [$opts{user}]\n";
    print "    --maphost=HOST   fully-qualified host name of MAP host\n";
    print "    --mapport=PORT   SSH port on MAP host [$opts{mapport}]\n";
    print "    --sshpath=PATH   full path to SSH client [$opts{sshpath}]\n";
    print "\n";
    print "  For an SSO-disabled resource (i.e. Mess) install:\n";
    print "    --type=resource  prepare installation for target resource\n";
    print "    --disable-sso    disable single sign-on functionality\n";
    print "\n";
    print "Report bugs to <paul.kolano\@nasa.gov>\n";
    exit 0;
}
$opts{prefix} =~ s/\/*$/\//;
if ($opts{type} !~ /^(mp|map|resource)$/) {
    print "*** ERROR: You must specify a valid type\n";
    exit 1;
}
$opts{type} = "mash" if ($opts{"disable-sso"} && $opts{type} eq "mp");
$opts{type} = "mess" if ($opts{"disable-sso"} && $opts{type} eq "resource");
$opts{mphost} = $host if ($opts{type} eq 'mp' && !$opts{mphost});
$opts{maphost} = $host if ($opts{type} eq 'map' && !$opts{maphost});

print "configuring Mesh for " . $opts{type} . " installation...\n";
while (my ($key, $val) = each %opts) {
    print "using $key = $val\n";
}

my $error = 0;
if ($opts{type} eq 'mp' && !$opts{maphost}) {
    print "*** ERROR: You must specify the fully-qualified host name of the MAP host\n";
    $error = 1;
}
if ($opts{type} eq 'map' && !$opts{mphost}) {
    print "*** ERROR: You must specify the fully-qualified host name of the MP host\n";
    $error = 1;
}
if ($opts{type} =~ /mp|map|mash/) {
    my @mods = qw(Tie::IxHash XML::Simple);
    if ($opts{type} ne "mash") {
        push(@mods, qw(Date::Parse Net::Netmask Text::Table));
    }
    foreach my $mod (@mods) {
        print "checking for $mod...";
        if (!system("perl -M$mod -e '1' 2>/dev/null")) {
            print "found\n";
        } else {
            print "not found\n";
            print "*** ERROR: Can't find $mod\n";
            $error = 1;
        }
    }
}

# must use File::BSDGlob in older versions without File::Glob
print "checking for File::Glob...";
if (!system("perl -MFile::Glob -e '1' 2>/dev/null")) {
        print "found\n";
} else {
    print "not found\n";
    print "checking for File::BSDGlob...";
    if (!system("perl -MFile::BSDGlob -e '1' 2>/dev/null")) {
        print "found\n";
    } else {
        print "not found\n";
        print "*** ERROR: File::Glob or File::BSDGlob required\n";
        $error = 1;
    }
}

if ($opts{type} eq 'mp') {
    foreach my $type (qw(map mp)) {
        my $host = $opts{$type . "host"};
        my $port = $opts{$type . "port"};
        print "determining host key of $host...";
        my ($fh, $tmp) = tempfile(UNLINK => 1);
        if (system("ssh-keyscan -t rsa -p $port $host >$tmp 2>/dev/null") ||
                -z $tmp) {
            print "failed\n";
            print "*** ERROR: ssh-keyscan of $host failed\n";
            $error = 1;
        } else {
            print "ok\n";
            print "computing host key fingerprint of $host...";
            my $print = qx{ssh-keygen -l -f $tmp 2>/dev/null};
            my @fields = split(/\s+/, $print);
            if ($fields[1] !~ /:/) {
                print "failed\n";
                print "*** ERROR: ssh-keygen -l of $host host key failed\n";
                $error = 1;
            } else {
                print "ok\n";
                $opts{$type . "print"} = $fields[1];
            }
        }
    }
}

if ($opts{type} ne 'mash') {
    $ENV{PREFIX} = $opts{prefix};
    $error = 1 if (system("cd ../bypass; ./configure"));
    $error = 1 if (system("cd bypass; ./configure"));
}
if ($error) {
    print "configuration failed...check output for errors\n";
    exit 1;
} else {
    $opts{mpip} = inet_ntoa(scalar gethostbyname($opts{mphost}))
        if ($opts{type} eq 'map');
    print "configuration succeeded...creating Makefile.config\n";
    open(FILE, ">Makefile.config");
    while (my ($key, $val) = each %opts) {
        print FILE uc($key) . "=" . $val . "\n";
    }
    close FILE;
}

