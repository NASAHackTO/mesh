#!/usr/bin/perl -T
#
# Copyright (C) 2006-2009 United States Government as represented by the
# Administrator of the National Aeronautics and Space Administration
# (NASA).  All Rights Reserved.
#
# This software is distributed under the NASA Open Source Agreement
# (NOSA), version 1.3.  The NOSA has been approved by the Open Source
# Initiative.  See http://www.opensource.org/licenses/nasa1.3.php
# for the complete NOSA document.
#
# THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF ANY
# KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT
# LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO
# SPECIFICATIONS, ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
# A PARTICULAR PURPOSE, OR FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT
# THE SUBJECT SOFTWARE WILL BE ERROR FREE, OR ANY WARRANTY THAT
# DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE SUBJECT SOFTWARE. THIS
# AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN ENDORSEMENT BY
# GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS, RESULTING
# DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS RESULTING
# FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY DISCLAIMS
# ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE, IF
# PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS".
#
# RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE UNITED STATES
# GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY PRIOR
# RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
# LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
# INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM,
# RECIPIENT'S USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND
# HOLD HARMLESS THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
# SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT, TO THE EXTENT PERMITTED
# BY LAW.  RECIPIENT'S SOLE REMEDY FOR ANY SUCH MATTER SHALL BE THE
# IMMEDIATE, UNILATERAL TERMINATION OF THIS AGREEMENT.
#

# This program generates a new key for the invoking user with a given
# expiration time.  It also allows long term identities to be initialized
# on the MAP.

use strict;
use File::Temp;
use Getopt::Long qw(:config bundling no_ignore_case require_order);

our $VERSION = 0.38;

my $localhost = "PREFIX/etc/mesh/localhost";
my $maphost = "PREFIX/etc/mesh/maphost";
my $meshkeys = "PREFIX/var/meshkeys";
my $musers = "PREFIX/etc/mesh/musers";
my $saverc = "/etc/saverc";

# untaint path
$ENV{PATH} = "/bin:/usr/bin:/usr/local/bin";

# parse arguments
my %opts = ();
my $rc = GetOptions(\%opts,
    "init", "init-add", "read", "time=s", "user=s",
);
die "Invalid options\n" if (!$rc || scalar(@ARGV) != 0);

# untaint/parse time
my %seconds = (
    s => 1,
    m => 60,
    h => 60 * 60,
    d => 24 * 60 * 60,
    w => 7 * 24 * 60 * 60,
    y => 365 * 24 * 60 * 60,
);
# time must be number followed by specifier for sec/min/hour/day/week/year
if ($opts{time} =~ /^(\d+)([smhdwy])$/) {
    $opts{time} = $1;
    $opts{time} *= $seconds{$2};
    $opts{time} += time;
} elsif ($opts{time}) {
    die "Invalid time\n";
}

# untaint user
if ($opts{user} =~ /^([\w-.]+)$/) {
    $opts{user} = $1;
} elsif ($opts{user}) {
    die "Invalid user\n";
}

my $useropt = $opts{user} ? "--user=$opts{user}" : "";
my $pubkey = "";
if ($opts{init} || $opts{"init-add"}) {
    my $home = (getpwuid($<))[7];
    # create ~/.ssh if needed
    if (! -d "$home/.ssh") {
        mkdir "$home/.ssh";
        chmod(0700, "$home/.ssh");
    }
    # store uploaded keys in standard location
    $pubkey = "$home/.ssh/authorized_keys";
} elsif ($opts{user}) {
    # generate key for given user if authorized
    my $user = getpwuid($<);
    if (open(MUSERS, $musers)) {
        while (<MUSERS>) {
            s/^\s+|\s+$//g;
            # authorizations for a user begin with the user name
            if (/^\Q$opts{user}\E\s+(.*)/) {
                my $users = $1;
                # invoking user must be in authorized list for given user
                if ($users =~ /(?:^|\s)\Q$user\E(?:\s|$)/) {
                    $pubkey = "$meshkeys/$opts{user}($user)";
                    last;
                }
            }
        }
        close MUSERS;
    }
    die "Cannot generate key for user \"$opts{user}\"\n" if (!$pubkey);
} else {
    # store generated keys in configured key directory
    $pubkey = "$meshkeys/" . (getpwuid($<))[0];
}
# make sure temporary public key file does not exist
unlink "$pubkey.tmp.pub";

if ($opts{init} || $opts{"init-add"}) {
    # initialize long term public key
    if (open(TMPKEY, ">$pubkey.tmp.pub")) {
        while(my $key = <STDIN>) {
            # get key fingerprint
            my $tmp = File::Temp->new;
            print $tmp $key;
            close $tmp;
            # extract fingerprint from key file
            my $print = qx{ssh-keygen -l -f $tmp 2>/dev/null};
            # fingerprint is everything between first and second space
            $print =~ s/^\S+\s+|\s+.*$//g;
            # fingerprint is sequence of hex pairs separated by colons
            if ($print =~ /\w\w(:\w\w)+/) {
                if ($key =~ /command/i) {
                    # ignore keys with forced commands
                    print "Key $print ignored (forced command)\n";
                } else {
                    print TMPKEY $key;
                    print "Key $print uploaded successfully\n";
                }
            }
        }
        close TMPKEY;
    } else {
        die "Cannot open temporary key file: $!\n";
    }
} elsif ($opts{read}) {
    # read key
    if (open(TMPKEY, ">$pubkey.tmp.pub")) {
        while(<STDIN>) {
            # ignore keys with forced commands
            print TMPKEY if (!/command/i); 
        }
        close TMPKEY;
    } else {
        die "Cannot open temporary key file: $!\n";
    }
} else {
    # make sure temporary private key file does not exist
    unlink "$pubkey.tmp";

    # generate key
    system("ssh-keygen -q -t rsa -N \"\" -C $opts{time} -f '$pubkey.tmp'");
    die "Cannot generate key via ssh-keygen: $!\n" if ($?);

    # read local host
    my $local;
    if (open(FILE, "<$localhost")) {
        local $/;
        $local = <FILE>;
        close FILE;
        # local host specification must be a host name with optional port
        if ($local =~ /([\w-]+(\.[\w-]+)*):?(\d+)?/) {
            $local = $1;
        } else {
            die "Invalid localhost file\n";
        }
    } else {
        die "Cannot open localhost file: $!\n";
    }

    # read MAP host and port
    my $map;
    my $mapport = "";
    if (open(FILE, "<$maphost")) {
        local $/;
        $map = <FILE>;
        close FILE;
        # MAP specification must be a host name with optional port
        if ($map =~ /([\w-]+(\.[\w-]+)*):?(\d+)?/) {
            $map = $1;
            $mapport = "-p $3" if (defined $3);
        } else {
            die "Invalid maphost file\n";
        }
    } else {
        die "Cannot open maphost file: $!\n";
    }

    if ($map ne $local) {
        # copy file to MAP if not local host
        system("ssh $mapport -axq -oBatchMode=yes $map mesh-keygen --read $useropt <'$pubkey.tmp.pub'");
        die "Cannot copy key to $map: $!\n" if ($?);
    }
}

if (!$opts{init}) {
    # append keys that have not expired
    open(TMPKEY, ">>$pubkey.tmp.pub");
    my $time = time;
    if (open(KEY, "<$pubkey")) {
        while (my $key = <KEY>) {
            if ($key =~ /\s+(\d+)\s*$/) {
                # skip keys with expiration time that are expired
                print TMPKEY $key if ($1 > $time);
            } elsif ($key ne 'dummykey') {
                print TMPKEY $key;
            }
        }
        close KEY;
    }
    close TMPKEY;
    if (!$opts{"init-add"}) {
        # make sure temporary public key file is world readable
        chmod(0644, "$pubkey.tmp.pub");
        if (!$opts{read}) {
            # echo private key to stdout
            open(TMPKEY, "<$pubkey.tmp");
            print while(<TMPKEY>);
            close TMPKEY;
            unlink "$pubkey.tmp";
        }
    }
}

# rename temporary public key file to final name
rename("$pubkey.tmp.pub", $pubkey);
# synchronize public key
if (-r $saverc) {
    system("save --sync --file '$pubkey' >/dev/null 2>/dev/null");
}

